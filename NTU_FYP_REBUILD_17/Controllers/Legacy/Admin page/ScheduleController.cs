using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Configuration;
using System.Globalization;
using System.Data;
using Newtonsoft.Json.Linq;
using NTU_FYP_REBUILD_17.Models;
using NTU_FYP_REBUILD_17.ViewModels;
using System.Web.Script.Serialization;
using System.Web.Routing;

namespace NTU_FYP_REBUILD_17.Controllers.Generator
{
    //[AllowAnonymous]
    public class ScheduleController : Controller
    {
        private ApplicationDbContext _context;
        App_Code.SOLID shortcutMethod = new App_Code.SOLID();
        Controllers.Synchronization.ScheduleMethod scheduler = new Controllers.Synchronization.ScheduleMethod();

        public ScheduleController()
        {
            _context = new Models.ApplicationDbContext();
        }

        protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }

        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
        public class NoDirectAccessAttribute : ActionFilterAttribute
        {
            public override void OnActionExecuting(ActionExecutingContext filterContext)
            {
                if (filterContext.HttpContext.Request.UrlReferrer == null ||
                            filterContext.HttpContext.Request.Url.Host != filterContext.HttpContext.Request.UrlReferrer.Host)
                {
                    filterContext.Result = new RedirectToRouteResult(new
                                   RouteValueDictionary(new { controller = "Home", action = "Index", area = "" }));
                }
            }
        }

        // GET: /Schedule
        [NoDirectAccess]
        [Authorize(Roles = RoleName.isSupervisor + "," + RoleName.isAdmin)]
        public ActionResult Index()
        {
            JObject scheduleUpdates = scheduler.getLastSchedule();

            if (scheduleUpdates["scheduleUpdates"] != null)
            {
                ViewBag.scheduleUpdates = scheduleUpdates["scheduleUpdates"].ToString();
            }
            if (scheduleUpdates["scheduleUpdates2"] != null)
            {
                ViewBag.scheduleUpdates2 = scheduleUpdates["scheduleUpdates2"].ToString();
            }
            if (scheduleUpdates["scheduleUpdates3"] != null)
            {
                ViewBag.scheduleUpdates3 = scheduleUpdates["scheduleUpdates3"].ToString();
            }
            if (TempData["Error"] != null)
            {
                scheduleUpdates["scheduleUpdates"] = TempData["Error"].ToString();
                scheduleUpdates["buttonAvailable"] = false;
            }
            if (TempData["Error1"] != null)
            {
                ViewBag.scheduleUpdates4 = TempData["Error1"].ToString();
            }

            ViewBag.Week = TempData["Week"];
            if (ViewBag.Week != "inactive")
                ViewBag.Week = "active";

            ViewBag.Day = TempData["Day"];
            if (ViewBag.Day != "active")
                ViewBag.Day = "inactive";

            if (TempData["progress"] == null)
                ViewBag.progress = "0%";
            else
            {
                ViewBag.progress = TempData["progress"];
                ViewBag.progressNo = TempData["progressNo"];
            }

            if (TempData["progress2"] == null)
                ViewBag.progress2 = "0%";
            else
            {
                ViewBag.progress2 = TempData["progress2"];
                ViewBag.progressNo2 = TempData["progressNo2"];
            }

            var model = new GenerateWeeklyScheduleViewModel
            {
                buttonAvailable = Convert.ToBoolean(scheduleUpdates["buttonAvailable"].ToString())
            };
            return View("~/Views/Legacy/Schedule/Index.cshtml", model);
        }

        // POST: /Schedule/generateWeeklySchedule
        [HttpPost]
        [NoDirectAccess]
        [Authorize(Roles = RoleName.isSupervisor + "," + RoleName.isAdmin)]
        public ActionResult generateWeeklySchedule()
        {
            scheduler.generateWeeklySchedule(true, false);

            TempData["Week"] = "active";
            TempData["Day"] = "inactive";
            TempData["Error"] = "Weekly schedule generated!";

            TempData["progress"] = "100%";
            TempData["progressNo"] = "100%";

            int userID = Convert.ToInt32(User.Identity.GetUserID2());

            string logDesc = "Weekly schedule generation";
            int logCategoryID = _context.LogCategories.FirstOrDefault(x => (x.logCategoryName == logDesc && x.isDeleted != 1)).logCategoryID;
            string remarks = "weekly schedule generated by: " + userID;

            // shortcutMethod.addLogToDB(string? oldLogData, string? logData, string logDesc, int logCategoryID, int? patientAllocationID, int? userIDInit, int? userIDApproved, int? intendedUserTypeID, string? additionalInfo, string? remarks, string tableAffected, string? columnAffected, string? logOldValue, string? logNewValue, int? rowAffected, int approved, int userNotified, string? rejectReason)
            shortcutMethod.addLogToDB(null, null, logDesc, logCategoryID, null, userID, userID, null, null, remarks, "schedule", "ALL", null, null, null, 1, 1, null);

            return RedirectToAction("Index");
        }

        // POST: /Schedule/generateDailySchedule
        [HttpPost]
        [NoDirectAccess]
        [Authorize(Roles = RoleName.isSupervisor + "," + RoleName.isAdmin)]
        public ActionResult generateDailySchedule()
        {
            scheduler.generateWeeklySchedule(false, false);

            TempData["Week"] = "inactive";
            TempData["Day"] = "active";
            TempData["Error1"] = "Daily schedule generated!";

            TempData["progress2"] = "100%";
            TempData["progressNo2"] = "100%";

            int userID = Convert.ToInt32(User.Identity.GetUserID2());

            string logDesc = "Daily schedule generation";
            int logCategoryID = _context.LogCategories.FirstOrDefault(x => (x.logCategoryName == logDesc && x.isDeleted != 1)).logCategoryID;
            string remarks = "daily schedule generated by: " + userID;

            // shortcutMethod.addLogToDB(string? oldLogData, string? logData, string logDesc, int logCategoryID, int? patientAllocationID, int? userIDInit, int? userIDApproved, int? intendedUserTypeID, string? additionalInfo, string? remarks, string tableAffected, string? columnAffected, string? logOldValue, string? logNewValue, int? rowAffected, int approved, int userNotified, string? rejectReason)
            shortcutMethod.addLogToDB(null, null, logDesc, logCategoryID, null, userID, userID, null, null, remarks, "schedule", "ALL", null, null, null, 1, 1, null);

            return RedirectToAction("Index");
        }
    }
}