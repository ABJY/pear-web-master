@using Microsoft.AspNet.Identity
@using NTU_FYP_REBUILD_17.Models
@model NTU_FYP_REBUILD_17.ViewModels.UserAccountViewModel

@{
    ViewBag.Title = "Settings";
    if (@User.Identity.GetUserTypeID() == "1")
    {
        Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    }
    else if (@User.Identity.GetUserTypeID() == "3")
    {
        Layout = "~/Views/Shared/_LayoutDoctor.cshtml";
    }
    else if (@User.Identity.GetUserTypeID() == "4")
    {
        Layout = "~/Views/Shared/_LayoutGameTherapist.cshtml";
    }
    else if (@User.Identity.GetUserTypeID() == "5")
    {
        Layout = "~/Views/Shared/_LayoutGuardian.cshtml";
    }
    else if (@User.Identity.GetUserTypeID() == "6")
    {
        Layout = "~/Views/Shared/_LayoutSupervisor.cshtml";
    }

    if (ViewBag.Modal == "true")
    {
        <script type="text/javascript">
            $(window).on('load', function () {
                $('#MyModal').modal('show');
            });
        </script>
    }
}

<style>
    #imageTitle1 {
        display: inline-block;
        margin-left: 120px;
        margin-right: 30px;
    }

    #imageUpload1 {
        display: inline-block;
        margin-right: 30px;
    }

    .square {
        height: 150px;
        width: 150px;
    }

    .glyphicon-remove {
        color: red;
    }

    .glyphicon-ok {
        color: green;
    }
</style>

<div class="portlet light ">
    <div class="portlet-title tabbable-line">
        <div class="caption caption-md">
            <i class="icon-globe theme-font hide"></i>
            <span class="caption-subject font-blue-madison bold uppercase">Account Settings</span>
        </div>
        <ul class="nav nav-tabs">
            <li class="@ViewBag.Info">
                <a href="#tab_1_1" data-toggle="tab">Personal Info</a>
            </li>
            <li class="@ViewBag.Pass">
                <a href="#tab_1_3" data-toggle="tab">Change Password</a>
            </li>
            <li class="@ViewBag.Img">
                <a href="#tab_1_5" data-toggle="tab">Upload Profile Picture</a>
            </li>
        </ul>
    </div>
    <div class="portlet-body">
        <div class="tab-content">
            <div class="tab-pane @ViewBag.Info" id="tab_1_1">
                @using (Html.BeginForm("UpdateSettings", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "form1" }))
                {
                    @Html.HiddenFor(p => p.id, new { @Value = @Model.User.Id, @id = "ab" })
                    <div align="center">
                        <h3>Personal Information</h3>
                    </div>
                    <div class="col-md-offset-2">
                        <p style="color:red">@ViewData["Error1"]</p>
                        @Html.ValidationSummary("", new { @class = "text-danger" })
                    </div>
                    <hr />
                    <div style="display: flex; justify-content: center;">
                        <img src="@Url.Content(Model.imageUrl)" alt="logo" class="square logo-default">
                    </div>
                    <hr />
                    <div class="form-group">
                        @Html.LabelFor(m => m.lastLogin, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.lastLogin, new { @class = "form-control", @Value = @Model.lastLogin, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.userID, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.userID, new { @class = "form-control", @Value = @Model.User.userID, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.userType, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.userType, new { @class = "form-control", @Value = @Model.userType, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.firstName, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.firstName, new { @class = "form-control", @Value = @Model.User.firstName, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.lastName, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.lastName, new { @class = "form-control", @Value = @Model.User.lastName, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Preferred Name<a style="color:blue; font-size:large">*</a></div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.preferredName, new { @class = "form-control", @Value = @Model.User.preferredName, required = "required" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.nric, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.nric, new { @class = "form-control", @Value = @Model.User.nric, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.gender, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.gender, new { @class = "form-control", @Value = @Model.gender, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.date, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.date, new { @class = "form-control datecontrol", @Value = @Model.date, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Email<a style="color:blue; font-size:large">*</a></div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @Value = @Model.User.Email, required = "required" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Address<a style="color:blue; font-size:large">*</a></div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.address, new { @class = "form-control", @Value = @Model.User.address, required = "required" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Phone No</div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.handphoneNo, new { @class = "form-control", @Value = @Model.User.PhoneNumber, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Office No</div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.officeNo, new { @class = "form-control", @Value = @Model.User.officeNo })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 control-label">Allow Notification<a style="color:blue; font-size:large">*</a></div>
                        <div class="col-md-10">
                            @if (Model.allowNotification == 1)
                            {
                                @Html.CheckBoxFor(m => m.notificationBool, new { @id = "option1", @checked = "checked" });
                            }
                            else
                            {
                                @Html.CheckBoxFor(m => m.notificationBool, new { @id = "option1" });
                            }
                            &nbsp;&nbsp;&nbsp;
                            <a style="color: red">(Only will be updated upon the next login)</a>
                        </div>
                    </div>
                    <div class="margiv-top-10 text-center">
                        <input class="space btn grey" type="button" onclick="history.back()" value="Cancel" />
                        <input id="submit" type="submit" class="space btn btn-primary" value="Save Changes" />
                    </div>
                }
            </div>
            <div class="tab-pane @ViewBag.Pass" id="tab_1_3">
                @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.HiddenFor(p => p.id, new { @Value = @Model.User.Id, @id = "a" });
                    <div align="center">
                        <h3>Change password</h3>
                    </div>
                    <div class="col-md-offset-2">
                        <p style="color:red">@ViewData["Error2"]</p>
                        <p>You may choose to update either the secret question, password or both.</p>
                    </div>
                    <hr />
                    <div class="form-group">
                        @Html.LabelFor(m => m.userName, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.userName, new { @class = "form-control", @Value = @Model.User.UserName, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.currentSecretQuestion, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.currentSecretQuestion, new { @class = "form-control", @Value = @Model.User.secretQuestion, @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.newSecretQuestion, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownList("SelectedQuestion", null, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.secretAnswer, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.secretAnswer, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group has-feedback">
                        @Html.LabelFor(m => m.currentPassword, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.currentPassword, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control nocopy nopaste", @id = "NewPassword" })
                            <div id="passwordCriteria" style="display:none">
                                <div id="Length" class="glyphicon glyphicon-remove">Must be at least 7 charcters</div><br />
                                <div id="UpperCase" class="glyphicon glyphicon-remove">Must have at least 1 upper case character</div><br />
                                <div id="LowerCase" class="glyphicon glyphicon-remove">Must have at least 1 lower case character</div><br />
                                <div id="Numbers" class="glyphicon glyphicon-remove">Must have at least 1 numeric character</div><br />
                                <div id="Symbols" class="glyphicon glyphicon-remove">Must have at least 1 special character</div><br />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control nocopy nopaste" })
                        </div>
                    </div>
                    <div class="margiv-top-10 text-center">
                        <input class="space btn grey" type="button" onclick="history.back()" value="Cancel" />
                        <input id="submit1" type="submit" class="space btn btn-primary" value="Save Changes" />
                    </div>
                }
            </div>
            <div class="tab-pane @ViewBag.Img" id="tab_1_5">
                @using (Html.BeginForm("uploadImage", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.HiddenFor(p => p.id, new { @Value = @Model.User.Id, @id = "a1" });
                    <div align="center">
                        <h3>Change Profile Picture</h3>
                    </div>
                    <div class="col-md-offset-2">
                        <p style="color:red">@ViewData["Error3"]</p>
                    </div>
                    <hr />
                    <div style="display: flex; justify-content: center;">
                        <img src="@Url.Content(Model.imageUrl)" alt="logo" class="square logo-default">
                    </div>
                    <br />
                    <div align="center">
                        <div id="imageTitle1">
                            Upload New Profile Picture
                        </div>
                        <div id="imageUpload1">
                            <input type="file" name="file" id="file" />
                        </div>
                    </div>
                    <br /><br />
                    <div class="margiv-top-10 text-center">
                        <input class="space btn grey" type="button" onclick="history.back()" value="Cancel" />
                        <input id="submit2" type="submit" class="space btn btn-primary" value="Upload Image" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script src="~/Content/global/plugins/jquery.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/js.cookie.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/jquery.blockui.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/bootstrap-switch/js/bootstrap-switch.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/bootstrap-fileinput/bootstrap-fileinput.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/jquery.sparkline.min.js" type="text/javascript"></script>
<script src="~/Content/global/scripts/app.min.js" type="text/javascript"></script>
<script src="~/Content/pages/scripts/profile.min.js" type="text/javascript"></script>

<script>
    /*Actual validation function*/
    function ValidatePassword() {
        /*Array of rules and the information target*/
        var rules = [{
            Pattern: "[A-Z]",
            Target: "UpperCase"
        },
          {
              Pattern: "[a-z]",
              Target: "LowerCase"
          },
          {
              Pattern: "[0-9]",
              Target: "Numbers"
          },
          {
              Pattern: "[!@@#$%^&*]",
              Target: "Symbols"
          }
        ];

        var element = document.getElementById('passwordCriteria');

        //Just grab the password once
        var password = $(this).val();

        if (password != null && password != "")
            element.style.display = 'block';
        else
            element.style.display = 'none';

        /*Length Check, add and remove class could be chained*/
        /*I've left them seperate here so you can see what is going on */
        /*Note the Ternary operators ? : to select the classes*/
        $("#Length").removeClass(password.length > 6 ? "glyphicon-remove" : "glyphicon-ok");
        $("#Length").addClass(password.length > 6 ? "glyphicon-ok" : "glyphicon-remove");

        /*Iterate our remaining rules. The logic is the same as for Length*/
        for (var i = 0; i < rules.length; i++) {

            $("#" + rules[i].Target).removeClass(new RegExp(rules[i].Pattern).test(password) ? "glyphicon-remove" : "glyphicon-ok");
            $("#" + rules[i].Target).addClass(new RegExp(rules[i].Pattern).test(password) ? "glyphicon-ok" : "glyphicon-remove");
        }
    }

    /*Bind our event to key up for the field. It doesn't matter if it's delete or not*/
    $(document).ready(function () {
        $("#NewPassword").on('keyup', ValidatePassword)
    });

    $('#submit1').click(function () {
        if (document.getElementById('NewPassword').value != "")
        {
            if (document.getElementById('Length').classList.contains("glyphicon-remove"))
                return false;

            if (document.getElementById('UpperCase').classList.contains("glyphicon-remove"))
                return false;

            if (document.getElementById('LowerCase').classList.contains("glyphicon-remove"))
                return false;

            if (document.getElementById('Numbers').classList.contains("glyphicon-remove"))
                return false;

            if (document.getElementById('Symbols').classList.contains("glyphicon-remove"))
                return false;
        }
        return true;
    });
</script>