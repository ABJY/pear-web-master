@using Microsoft.AspNet.Identity
@using NTU_FYP_REBUILD_17.Models
@model NTU_FYP_REBUILD_17.ViewModels.ManagePreferencesViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutSupervisor.cshtml";
}

<div class="portlet box blue-madison">
    <div class="portlet-title">
        <div class="caption" id="pageTitle">
            <i class="fa fa-folder-open-o"></i>Patient's Preferences for @Model.centreActivity.activityTitle
        </div>
        <div class="tools"> </div>
    </div>
    <div class="portlet-body">
        @if (TempData["success"] != null)
        {
            <div class="alert alert-success text-center" role="alert">@TempData["success"]</div>
        }

        @if (TempData["error"] != null)
        {
            <div class="alert alert-danger  text-center" role="alert">@Html.Raw(TempData["error"])</div>
        }

        <div class="col-md-3">
            Filter:
            @Html.DropDownListFor(m => m.filterActivityID, new SelectList(Model.activityList.OrderBy(x => x.activityTitle), "centreActivityID", "activityTitle"), new { @class = "form-control", @id = "activityFilter" })

        </div>
        <br /><br /><br /> <br />

            <table class="table table-striped table-bordered table-hover dt-responsive" id="sample_3" cellspacing="0" width="100%">
                <thead>
                    <tr>

                        <th class="min-tablet" width="15%">Patient Name</th>
                        <th class="desktop4" width="10%">Preferences</th>
                        <th class="desktop4" width="9%">Schedule</th>
                        <th class="desktop4" width="10%">Doc Recommended</th>
                        <th class="desktop4" width="20%">Doc Remarks </th>
                        <th class="desktop4">Exclusion Details </th>


                    </tr>



                </thead>
                <tbody>

                    @{ int i = 0; }

                    @foreach (var x in Model.ListOfActPref)
                    {

                        <tr>
                            <td>@x.patient.firstName @x.patient.lastName</td>

                            <td>
                                <div class="form-group">
                                        @if (x.actPreference.isLike == 1)
                                        {
                                            <span class="fa fa-lg fa-smile-o space text-success"></span>
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "neutral" })" class="fa fa-lg fa-meh-o space text-muted" onclick="return confirm('Are you sure you want to change to NEUTRAL?')"></a>
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "dislike" })" class="fa fa-lg fa-frown-o space text-muted" onclick="return confirm('Are you sure you want to change to DISLIKE?')"></a>
                                        }
                                        else if (x.actPreference.isNeutral == 1)
                                        {
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "like" })" class="fa fa-lg fa-smile-o space text-muted" onclick="return confirm('Are you sure you want to change to LIKE?')"></a>
                                            <span class="fa fa-lg fa-meh-o space text-warning"></span>
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "dislike" })" class="fa fa-lg fa-frown-o space text-muted" onclick="return confirm('Are you sure you want to change to DISLIKE?')"></a>

                                        }
                                        else if (x.actPreference.isDislike == 1)
                                        {
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "like" })" class="fa fa-lg fa-smile-o space text-muted" onclick="return confirm('Are you sure you want to change to LIKE?')"></a>
                                            <a href="@Url.Action("LikeActivityPref", "Supervisor", new { Id = x.actPreference.activityPreferencesID, patientId = x.patient.patientID, type = "neutral" })" class="fa fa-lg fa-meh-o space text-muted" onclick="return confirm('Are you sure you want to change to NEUTRAL?')"></a>
                                            <span class="fa fa-lg fa-frown-o space text-danger"></span>

                                        }


                                    </div>
                            </td>


                            @{ i++; }



                            <td>
                                @if (x.activityExcluded != null)
                                {
                                    <a href="@Url.Action("IncludeActivityPref", "Supervisor", new { Id = x.activityExcluded.activityExclusionId, patientId = x.patient.patientID })" class="fa fa-lg fa-check space text-muted "></a>
                                    <span class="fa fa-lg fa-times space text-danger"></span>

                                }
                                else
                                {
                                    <span class="fa fa-lg fa-check space text-success"></span>

                                    <a class="fa fa-lg fa-times space text-muted excludeAct" id=@x.activityID xtitle='@x.actPreference.CentreActivity.activityTitle' pID='@x.patient.patientID'></a>
                                }
                            </td>

                            <td>
                                @if (x.actPreference.doctorRecommendation == 2)
                                {
                                    <span>-</span>
                                }
                                else if (x.actPreference.doctorRecommendation == 1)
                                {
                                    <span>Yes</span>

                                }
                                else
                                {
                                    <span>No</span>

                                }

                            </td>
                            <td>
                                @*<div class="container">
                                    <div class="row">*@
                                        @*<label><b>Doctor's Remark:</b></label>*@
                                        @if (x.actPreference.doctorRemarks != null)
                                        {
                                            @x.actPreference.doctorRemarks<br /><br />
                                        }
                                        else
                                        {
                                            <span>nil</span><br /><br />
                                        }
                                </td>
                            <td>
                                @if (x.activityExcluded != null)
                                {

                                    <label>
                                        <b><u>Exclusion</u></b>
                                        <a class="fa fa-pencil editExclusion" id="@x.activityExcluded.activityExclusionId" pID="@x.patient.patientID"></a>
                                    </label><br />

                                    <label><b>Start Date:</b></label>

                                    @x.activityExcluded.dateTimeStart.ToString("dd/MM/yyyy")<br />
                              
                                    <label><b>End Date:</b></label>
                                    @x.activityExcluded.dateTimeEnd.ToString("dd/MM/yyyy")<br />


                                    <label><b>Notes:</b></label>
                                    @x.activityExcluded.notes<br />


                                }
                                @*</div>
        </div>*@
                            </td>
                        </tr>
                    }


                </tbody>
            </table>
        <br /><br />
        <div class="margiv-top-10 margin-bottom-10 pull-right">
            <input class="btn grey" type="button" onclick="window.location.replace('@Url.Action("ManagePatient", "Supervisor")')" value="Cancel" />
        </div>
        <br /><br />

    </div>
</div>

<div id="ExcludeModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            @using (Html.BeginForm("AddActivityExclusion", "Supervisor", FormMethod.Post, new { @role = "form", @id = "form1" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="excludeModTitle"></h4>
                </div>
                <div class="modal-body">
                    <div id="hidden"></div>
                    @Html.HiddenFor(m => m.patient.patientID, new { @id = "bc" })


                    <label><b>Start Date</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.dateTimeStart, "dd/mm/yyyy", new { @class = "form-control date-picker", @data_date_format = "dd/mm/yyyy", required = "required", id = "datetimepicker1" })
                    <span style="display: none; color:red;" id="startDateError"></span>
                    <span style="display: none; color:red;" id="startDateError1"></span>
                    <br />

                    <label><b>End Date</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.dateTimeEnd, "dd/mm/yyyy", new { @class = "form-control date-picker", @data_date_format = "dd/mm/yyyy", required = "required", id = "datetimepicker2" })
                    <span style="display: none; color:red;" id="endDateError"></span>

                    <br />

                    <label><b>Notes</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.notes, new { @class = "form-control" })
                    <br />
                    <input type="hidden" id="hiddenActivityID" name="activityID" />


                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" id="addSubmit">Submit</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            }
        </div>

    </div>
</div>

<div id="EditModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            @using (Html.BeginForm("EditActivityExclusion", "Supervisor", FormMethod.Post, new { @role = "form", @id = "form1" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="excludeModTitle1"></h4>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(m => m.patient.patientID, new { @id = "ab" })


                    <label><b>Start Date</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.dateTimeStart, "dd/mm/yyyy", new { @class = "form-control date-picker", @data_date_format = "dd/mm/yyyy", required = "required", id = "datetimepicker3" })
                    @*<span style="display: none; color:red;" id="startDateError2"></span>
                    <span style="display: none; color:red;" id="startDateError3"></span>*@
                    <br />

                    <label><b>End Date</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.dateTimeEnd, "dd/mm/yyyy", new { @class = "form-control date-picker", @data_date_format = "dd/mm/yyyy", required = "required", id = "datetimepicker4" })
                    <br />

                    <label><b>Notes</b></label><br />
                    @Html.TextBoxFor(m => m.actExInput.notes, new { @class = "form-control", id = "editNotes" })
                    @*<span style="display: none; color:red;" id="endDateError1"></span>*@

                    <br />
                    <input type="hidden" id="hiddenActivityID1" name="exActivityID" />


                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            }
        </div>

    </div>
</div>



<script src="~/Content/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript"></script>

@*DataTable*@
<link href="~/Content/global/plugins/datatables/datatables.min.css" rel="stylesheet" type="text/css" />
<link href="~/Content/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css" rel="stylesheet" type="text/css" />
<script src="~/Content/global/plugins/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script src="~/Content/global/scripts/datatable.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/datatables/datatables.min.js" type="text/javascript"></script>
<script src="~/Content/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js" type="text/javascript"></script>
<link href="~/Content/global/plugins/bootstrap/css/custom.css" rel="stylesheet" type="text/css">

<script src="~/Content/pages/scripts/table-datatables-responsive.min.js" type="text/javascript"></script>

<link href="~/Content/global/plugins/bootstrap/css/custom.css" rel="stylesheet" type="text/css">
<script>
    $(document).ready(function () {

        $('#sample_3').DataTable().destroy();

        $('#sample_3').DataTable({
            columnDefs: [
                { targets: [1, 2], "orderable": false },
                //targets: [1, 2], width: '0%'
            ],
            "order": [0, "asc"],

        });

        $('#datetimepicker1').datepicker({
            defaultDate: null,
        });

        $('#datetimepicker2').datepicker({
            defaultDate: null,
        });

        $('#datetimepicker3').datepicker({
            defaultDate: null,
        });

        $('#datetimepicker4').datepicker({
            defaultDate: null,
        });

        $(document).delegate('.excludeAct', 'click', function () {

            $("#ExcludeModal").modal('show');

            var id = $(this).attr('id');
            var title = $(this).attr('xtitle');
            var patientID = $(this).attr('pID');

            //console.log(id);

            $("#bc").val(patientID);

            $("#hiddenActivityID").empty();
            $("#hiddenActivityID").val(id);

            $("#excludeModTitle").text("Exclude " + title);




        });





        $('#datetimepicker1').change(function () {
            var datetimepicker1Val = $("#datetimepicker1").val();
            var datetimepicker2Val = $("#datetimepicker2").val();
            dateCheck(datetimepicker1Val, datetimepicker2Val, "add");
        });

        $('#datetimepicker2').change(function () {
            var datetimepicker1Val = $("#datetimepicker1").val();
            var datetimepicker2Val = $("#datetimepicker2").val();
            dateCheck(datetimepicker1Val, datetimepicker2Val, "add");
        });

     

        $(document).delegate('#addSubmit', 'click', function () {
            var datetimepicker1Val = $("#datetimepicker1").val();
            var datetimepicker2Val = $("#datetimepicker2").val();
            dateCheck(datetimepicker1Val, datetimepicker2Val, "add");

        });



        $(document).delegate('.editExclusion', 'click', function () {
            $("#EditModal").modal('show');
            var patientID = $(this).attr('pID');
            $("#ab").val(patientID);


            $.ajax({
                type: 'POST',
                dataType: 'json',
                data: {
                    id: $(this).attr('id'),
                },
                url: '@Url.Action("GetExclusionById", "Supervisor")',
                success: function (result) {

                    $("#hiddenActivityID1").empty();

                    $("#hiddenActivityID1").val(result.activityExclusionId);

                    $("#editNotes").val(result.notes);

                    var dateStart = new Date(parseInt(result.dateTimeStart.substr(6)));
                    var dd = dateStart.getDate();
                    var mm = dateStart.getMonth() + 1; //January is 0!

                    var yyyy = dateStart.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var startDate = dd + '/' + mm + '/' + yyyy;

                    $("#datetimepicker3").val(startDate);



                    var dateEnd = new Date(parseInt(result.dateTimeEnd.substr(6)));
                    var dd = dateEnd.getDate();
                    var mm = dateEnd.getMonth() + 1; //January is 0!

                    var yyyy = dateEnd.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var endDate = dd + '/' + mm + '/' + yyyy;
                    $("#datetimepicker4").val(endDate);


                }
            });

        });

        function ajaxFilter(activityID) {
             $.ajax({
                type: 'POST',
                dataType: 'json',
                data: {
                    activityID: activityID
                },
                //async: 'true',
                url: '@Url.Action("GetPreferenceByActivity", "Supervisor")',
                success: function (result) {
                   
                    body.empty();

                  

                    for (var i = 0; i < result.length; i++) {

                        $("#pageTitle").text("Patient's Preferences for "+result[0].actPreference.CentreActivity.activityTitle);

                
                        //preferences
                        var preferences = "";

                            if (result[i].actPreference.isLike == 1) {
                                preferences =
                                    "<span class='fa fa-lg fa-smile-o space text-success'></span>" +
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "neutral" })' class='fa fa-lg fa-meh-o space text-muted' id='neutralBtn'></a>" +
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "dislike" })' class='fa fa-lg fa-meh-o space text-muted' id='dislikeBtn'></a>";

                            } else if (result[i].actPreference.isNeutral == 1) {
                                preferences =
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "like" })' class='fa fa-lg fa-smile-o space text-muted' id='likeBtn'></a>" +
                                     "<span class='fa fa-lg fa-meh-o space text-warning'></span>" +
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "dislike" })' class='fa fa-lg fa-meh-o space text-muted' id='dislikeBtn'></a>";

                            } else if (result[i].actPreference.isDislike == 1) {

                                preferences =
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "like" })' class='fa fa-lg fa-smile-o space text-muted' id='likeBtn'></a>" +
                                    "<a href='@Url.Action("LikeActivityPref", "Supervisor", new { Id = "activityPreferenceIDParam", patientId = "patientIDParam", type = "neutral" })' class='fa fa-lg fa-meh-o space text-muted' id='neutralBtn'></a>" +
                                "<span class='fa fa-lg fa-frown-o space text-danger'></span>";

                            }

                        $('')
                        var newpref = preferences.replace(/activityPreferenceIDParam/g, result[i].actPreference.activityPreferencesID);
                        var pref = newpref.replace(/patientIDParam/g, result[i].patient.patientID);

                            //include/exclude
                            var schedule = "";
                        if (result[i].activityExcluded != null) {
                                schedule =
                                    "<a href='@Url.Action("IncludeActivityPref", "Supervisor", new { Id = "activityExclusionIdParam", patientId = "patientIDParam" })' class='fa fa-lg fa-check space text-muted '></a>" +
                                    "<span class='fa fa-lg fa-times space text-danger'></span>";
                            } else {
                                schedule =
                                    "<span class='fa fa-lg fa-check space text-success'></span>" +
                                "<a class='fa fa-lg fa-times space text-muted excludeAct' id='" + result[i].actPreference.centreActivityID + "' xtitle='" + result[i].actPreference.CentreActivity.activityTitle + "' pID='" + result[i].patient.patientID + "'></a>";

                                $(".excludeAct").attr('id', result[i].actPreference.centreActivityID);
                    
                            }


                            if (result[i].activityExcluded != null) {
                               schedule = schedule.replace('activityExclusionIdParam', result[i].activityExcluded.activityExclusionId);
                               schedule = schedule.replace('patientIDParam', result[i].patient.patientID);

                            }

                            //doctorRecommendation
                            var docRec = "";
                            if (result[i].actPreference.doctorRecommendation == 2) {
                                docRec = "<span>-</span>";
                            }
                            else if (result[i].actPreference.doctorRecommendation == 1) {
                                docRec = "<span>Yes</span>";

                            }
                            else {
                                docRec = "<span>No</span>";

                            }

                        var label = "";

                        var remarks = "";
                        if (result[i].actPreference.doctorRemarks != null)
                          {
                             remarks = result[i].actPreference.doctorRemarks +"<br /><br />";
                         }
                           else
                          {
                             remarks = "<span>nil</span><br /><br />";
                           }

                        var exLabel = "";
                         if (result[i].activityExcluded != null)
                         {
                             var datetime = new Date(parseInt(result[i].activityExcluded.dateTimeStart.substr(6)));
                             var dd = datetime.getDate();
                             var mm = datetime.getMonth() + 1; //January is 0!

                             var yyyy = datetime.getFullYear();
                             if (dd < 10) {
                                 dd = '0' + dd;
                             }
                             if (mm < 10) {
                                 mm = '0' + mm;
                             }
                             var startdate = dd + '/' + mm + '/' + yyyy;


                             var datetime = new Date(parseInt(result[i].activityExcluded.dateTimeEnd.substr(6)));
                             var dd = datetime.getDate();
                             var mm = datetime.getMonth() + 1; //January is 0!

                             var yyyy = datetime.getFullYear();
                             if (dd < 10) {
                                 dd = '0' + dd;
                             }
                             if (mm < 10) {
                                 mm = '0' + mm;
                             }


                             var enddate = dd + '/' + mm + '/' + yyyy;


                             exLabel = "<label>"+
                                        "<b><u>Exclusion</u></b> "+
                                        "<a class='fa fa-pencil editExclusion' id='" + result[i].activityExcluded.activityExclusionId + "' pID='" + result[i].patient.patientID + "'></a></label><br />" +     
                                         "<label><b>Start Date:</b></label>" +
                                         startdate + "<br/>" +
                                         "<label><b>End Date:</b></label>"+
                                          enddate+"<br />"+
                                            "<label><b>Notes:</b></label>"+
                                        result[i].activityExcluded.notes+"<br />";
                        }
                        

                        body.append("<tr><td>" + result[i].patient.firstName + " " + result[i].patient.lastName + "</td>" +
                            "<td>" + pref + "</td>" +
                            "<td>" + schedule + "</td>" +
                            "<td>" + docRec + "</td>" +
                            "<td>" + label + remarks + "</td><td>" + exLabel +"</td></tr>");
                    }

                }
                   

            });
        };

        var actID = '@TempData["activityID"]';

        console.log(actID);

        if (actID == "") {
            $("#activityFilter").val(3);
        }
        else {
            $("#activityFilter").val(actID);
            ajaxfilter(actid);
        }
     
        var body = $("#sample_3").find('tbody');

        $('#activityFilter').on('change', function () {
            var activityID = $("#activityFilter").val();
            ajaxFilter(activityID);
           
            });
     
      

        $(document).delegate('#likeBtn', 'click', function () {
            if (confirm('Are you sure you want to change to LIKE?') == true) {
                return true;

            } else {

                return false;
            }
        });

        $(document).delegate('#dislikeBtn', 'click', function () {
            if (confirm('Are you sure you want to change to DISLIKE?') == true) {
                return true;

            } else {

                return false;
            }
        });

        $(document).delegate('#neutralBtn', 'click', function () {
            if (confirm('Are you sure you want to change to NEUTRAL?') == true) {
                return true;

            } else {

                return false;
            }
        });




        function dateCheck(datetime1, datetime2, mode) {
           
            var datetime = new Date();
            var dd = datetime.getDate();
            var mm = datetime.getMonth() + 1; //January is 0!

            var yyyy = datetime.getFullYear();
            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            var d = dd + '/' + mm + '/' + yyyy;


            var arrStartDate = datetime1.split("/");
            var stdate = new Date(arrStartDate[2], arrStartDate[1], arrStartDate[0]);

            var arrEndDate = datetime2.split("/");
            var enddate = new Date(arrEndDate[2], arrEndDate[1], arrEndDate[0]);


            var arrCrDate = d.split("/");
            var tdate = new Date(arrCrDate[2], arrCrDate[1], arrCrDate[0]);

            if (stdate < tdate) {
                if (mode = "add") {
                    document.getElementById("startDateError").innerHTML = "Start date cannot be before today.";
                    document.getElementById("startDateError").style.display = "block";
                }
                //else {
                //    document.getElementById("startDateError2").innerHTML = "Start date cannot be before today.";
                //    document.getElementById("startDateError2").style.display = "block";
                //}
                    return false;

            } else {
                if (mode = "add") {
                    document.getElementById("startDateError").innerHTML = "";
                    document.getElementById("startDateError").style.display = "none";
                }
                //else {
                //    document.getElementById("startDateError2").innerHTML = "";
                //    document.getElementById("startDateError2").style.display = "none";
                //}
                }

            if (stdate > enddate && enddate != "") {
                if (mode = "add") {

                    document.getElementById("startDateError1").innerHTML = "Start date cannot be after end date.";
                    document.getElementById("startDateError1").style.display = "block";
                }
                //else {

                //    document.getElementById("startDateError3").innerHTML = "Start date cannot be after end date.";
                //    document.getElementById("startDateError3").style.display = "block";
                //}
                    return false;

            } else {
                if (mode = "add") {
                    document.getElementById("startDateError1").innerHTML = "";
                    document.getElementById("startDateError1").style.display = "none";
                }
                //else {

                //    document.getElementById("startDateError3").innerHTML = "Start date cannot be after end date.";
                //    document.getElementById("startDateError3").style.display = "block";
                //}
                }


            if (enddate < tdate && stdate != "") {
                if (mode = "add") {
                    document.getElementById("endDateError").innerHTML = "End date cannot be before today.";
                    document.getElementById("endDateError").style.display = "block";
                }
                //else {
                //    document.getElementById("endDateError1").innerHTML = "End date cannot be before today.";
                //    document.getElementById("endDateError1").style.display = "block";
                //}
                    return false;

            } else {
                if (mode = "add") {
                    document.getElementById("endDateError").innerHTML = "";
                    document.getElementById("endDateError").style.display = "none";
                }
                //else {
                //    document.getElementById("endDateError1").innerHTML = "End date cannot be before today.";
                //    document.getElementById("endDateError1").style.display = "block";
                //}
                }
            
        }


      

    });

</script>